@page "/chats/films/{MovieId:int}"
@rendermode InteractiveServer
@using static BlazorApi.Components.Pages.Chats
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using BlazorAPI.ApiRequest
@using BlazorApi.ApiRequest
@using BlazorAPI.ApiRequest.Model
@using BlazorApi.ApiRequest.Model
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject MessagesService MessagesService
@inject MovieService MovieService

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh; /* Высота на всю страницу */
        width: 80%;
        margin: auto;
        border: 1px solid #80bfff; /* Голубая рамка */
        border-radius: 8px;
        background-color: #e6f7ff; /* Светло-голубой фон */
    }

    .chat-title {
        background-color: #007acc; /* Синий цвет заголовка */
        color: white;
        padding: 10px;
        text-align: center;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .messages {
        flex: 1; /* Занимает оставшееся пространство */
        padding: 10px;
        overflow-y: auto; /* Прокрутка при переполнении */
    }

    .message {
        margin: 5px 0;
        padding: 10px;
        border-radius: 5px;
        max-width: 80%;
    }

    .user-message {
        align-self: flex-end;
        background-color: #cce6ff; /* Голубой фон для сообщений пользователя */
    }

    .sender-message {
        align-self: flex-start;
        background-color: #ffffff; /* Белый фон для сообщений отправителя */
    }

    .timestamp {
        font-size: 0.8em;
        color: #666; /* Серый цвет для времени */
        margin-top: 5px;
    }

    .input-container {
        display: flex;
        padding: 10px;
        border-top: 1px solid #80bfff; /* Голубая рамка */
        background-color: #ffffff; /* Белый фон для контейнера ввода */
    }

    input[type="text"] {
        flex: 1; /* Занимает оставшееся пространство */
        padding: 10px;
        border: 1px solid #80bfff; /* Голубая рамка */
        border-radius: 5px;
        margin-right: 10px;
    }

    button {
        padding: 10px 15px;
        background-color: #007acc; /* Синий цвет кнопки */
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        button:hover {
            background-color: #005c99; /* Темно-синий при наведении */
        }

    .film-title {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .sender-name {
        font-size: 0.9em;
        color: #007acc; /* Синий цвет для имени отправителя */
        cursor: pointer;
    }
</style>

@* <div class="chat-container">
    <h2 class="chat-title">Chat films</h2>
    <div class="messages">
        @foreach (var message in messages)
        {
            <div class="message @(message.SenderId == userId ? "user-message" : "sender-message")">
                @if (!string.IsNullOrEmpty(message.Title))
                {
                    <div class="film-title">Фильм: @message.Title</div>
                }
                <div class="message-content">
                    @if (message.SenderId != userId)
                    {
                        <a class="sender-name" href="/chats/@message.SenderId">@message.SenderName:</a>
                    }
                    else
                    {
                        <p class="sender-name">@message.SenderName:</p>
                    }
                    <p>@message.Message</p>
                    <span class="timestamp">@message.Timestamp.ToString("HH:mm")</span>
                </div>
            </div>
        }
    </div>
    <div class="input-container">
        <select @bind="selectedMovieId">
            <option value="no">Выберите фильм</option>
            @foreach (var movie in movies)
            {
                <option value="@movie.Id">@movie.Name</option>
            }
        </select>
        <input type="text" @bind="newMessageContent" placeholder="Введите сообщение..." @onkeydown="@(e => { if (e.Key == "Enter") SendMessage(); })" />
        <button @onclick="SendMessage">Отправить</button>
    </div>
</div> *@
<h3>Чаты по фильмам</h3>

@if (movies == null || !movies.Any())
{
    <p>Пока что нет фильмов</p>
}
else
{
    <select @bind="selectedMovieId" class="form-control">
        <option value="">Выберите фильм</option>
        @foreach (var movie in movies)
        {
            <option value="@movie.Id">@movie.Name</option>
        }
    </select>
}

@if (messages == null || !messages.Any())
{
    <p>Пока что нет чатов по фильмам</p>
}
else
{
    <div class="chat-list">
        @foreach (var message in messages)
        {
            <div class="chat-item">
                <span><strong>@message.SenderName:</strong> @message.Message</span>
                <span style="color: gray; font-size: smaller;">@message.Timestamp.ToString("HH:mm:ss")</span>
            </div>
        }
    </div>
}

<div class="input-group">
    <input type="text" @bind="newMessageContent" placeholder="Введите сообщение..." @onkeydown="@(e => { if (e.Key == "Enter") SendMessage(); })" />
    <button @onclick="SendMessage">Отправить</button>
</div>

@code {
    private string newMessageContent;
    private int userId;
    private string username;
    private string selectedMovieId;
    private string filmName;
    private int movieId;
    private List<Movie> movies = new List<Movie>();
    private List<MessagesFilmDto> messages = new List<MessagesFilmDto>();
    private HubConnection? hubConnection;

    [Parameter]
    public int MovieId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (MovieId > 0)
        {
            movieId = MovieId;
            var movie = await MovieService.GetMovieAsync(movieId);
            if (movie != null)
            {
                filmName = movie.Name;
                messages = await MessagesService.getMessagesFilmAsync(movieId);
            }
            else
            {
                // Обработка случая, когда фильм не найден
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"http://localhost:5256/chatHub?userId={userId}")
            .Build();

        await hubConnection.StartAsync();

        hubConnection.On<string, int, string, string>("ReceiveMessageFilm", (message, senderId, senderName, title) =>
        {
            if (movieId > 0)
            {
                messages.Add(new MessagesFilmDto
                    {
                        SenderId = senderId,
                        SenderName = senderName,
                        Title = title,
                        Message = message,
                        Timestamp = DateTime.Now
                    });
                InvokeAsync(StateHasChanged);
            }
        });

        movies = await MovieService.GetMoviesAsync();
    }

    private async Task<string> RefreshTokenAsync()
    {
        var refreshToken = await LocalStorage.GetItemAsync<string>("refreshToken");
        var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
        var response = await httpClient.PostAsJsonAsync("api/Auth/RefreshToken", new { RefreshToken = refreshToken });

        if (response.IsSuccessStatusCode)
        {
            var newToken = await response.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("authToken", newToken);
            return newToken;
        }
        else
        {
            Console.WriteLine("Ошибка при обновлении токена.");
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("refreshToken");
            Navigation.NavigateTo("/login");
            return null;
        }
    }

    private bool IsTokenValid(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var expirationDate = jwtToken.ValidTo;
            return expirationDate > DateTime.UtcNow;
        }
        catch
        {
            return false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token) || !IsTokenValid(token))
            {
                Console.WriteLine("Токен отсутствует или истек. Попытка обновления...");
                token = await RefreshTokenAsync();

                if (string.IsNullOrEmpty(token))
                {
                    Console.WriteLine("Не удалось обновить токен. Перенаправление на страницу входа.");
                    Navigation.NavigateTo("/login");
                    return;
                }
            }
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            userId = int.Parse(jwtToken.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);

            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5256/chatHub")
                .Build();

            hubConnection.On<string, int, string, int?>("ReceiveMessageFilm", (message, senderId, senderName, filmId) =>
            {
                if (filmId == movieId)
                {
                    messages.Add(new MessagesFilmDto
                        {
                            SenderId = senderId,
                            SenderName = senderName,
                            Message = message,
                            Timestamp = DateTime.Now
                        });
                    InvokeAsync(StateHasChanged);
                }
            });

            await hubConnection.StartAsync();
        }
    }

    private async void SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessageContent)) return;

        if (!string.IsNullOrEmpty(selectedMovieId))
        {
            movieId = int.Parse(selectedMovieId);
            var movie = movies.FirstOrDefault(m => m.Id == movieId);
            if (movie != null)
            {
                filmName = movie.Name;

                await hubConnection.SendAsync("SendMessageFilm", newMessageContent, userId, movieId);
                messages.Add(new MessagesFilmDto
                    {
                        SenderId = userId,
                        SenderName = username,
                        Title = filmName,
                        Message = newMessageContent,
                        Timestamp = DateTime.Now
                    });
                newMessageContent = string.Empty;
            }
        }
    }

    public class MessagesFilm
    {
        public int SenderId { get; set; }
        public string SenderName { get; set; }
        public string? Title { get; set; }
        public string Message { get; set; }
        public DateTime Timestamp { get; set; } = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Russian Standard Time"));
    }
}
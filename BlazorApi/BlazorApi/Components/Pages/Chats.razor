@page "/chats"
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using BlazorAPI.ApiRequest
@using BlazorAPI.ApiRequest.Model
@using BlazorApi.ApiRequest
@using BlazorApi.ApiRequest.Model
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@inject MessagesService MessagesService
@inject MovieService MovieService

<style>
    .chat-list {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        padding: 20px;
        background-color: #e6f7ff; /* Светло-голубой фон */
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .chat-item {
        background-color: #b3d9ff; /* Голубой фон для элементов чата */
        border: 1px solid #80bfff; /* Голубая рамка */
        border-radius: 8px;
        padding: 15px 20px;
        margin: 10px 0;
        width: 80%;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s;
    }

        .chat-item:hover {
            background-color: #80bfff; /* Более яркий голубой при наведении */
            transform: scale(1.02);
        }

    h3 {
        color: #003366; /* Темно-синий текст */
        text-align: center;
        margin-bottom: 20px;
    }
</style>
<h3> Чаты </h3>

<div class="chat-list">
    <h3>Чаты</h3>
    <div class="filter-buttons">
        <button @onclick="() => ShowPersonalChats()">Личные сообщения</button>
        <button @onclick="() => ShowFilmChats()">Чаты по фильмам</button>
    </div>

    @if (showPersonalChats)
    {
        @if (personalChats.Count != 0)
        {
            @foreach (var chat in personalChats)
            {
                <div class="chat-item" @onclick="() => NavigateToChat(chat)">
                    @if (chat.ReceiverId == userId)
                    {
                        @chat.SenderName
                    }
                    else
                    {
                        @chat.ReceiverName
                    }
                </div>
            }
        }
        else
        {
            <div class="chat-item">Пока что нет личных чатов</div>
        }
    }
    else
    {
        @if (filmChats.Count != 0)
        {
            @foreach (var chat in filmChats)
            {
                <div class="chat-item" @onclick="() => NavigateToFilmChat(chat)">
                    @chat
                </div>
            }
        }
        else
        {
            <div class="chat-item">Пока что нет чатов по фильмам</div>
        }
    }
</div>

@code {
    private List<UserMessageDto> chats = new List<UserMessageDto>();
    private List<UserMessageDto> filteredChats = new List<UserMessageDto>();
    private List<UserMessageDto> personalChats = new List<UserMessageDto>();
    private List<MessagesFilmDto> filmChats = new List<MessagesFilmDto>();
    private bool showPersonalChats = true;
    private int movieId;
    private List<Movie> movies = new List<Movie>();
    private int userId;
    private HubConnection? hubConnection;
    private readonly IHttpClientFactory _httpClientFactory;
    private const string BaseUrl = "api/messages";

    [Parameter]
    public int MovieId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (MovieId > 0)
        {
            movieId = MovieId;
        }
    }
    private void NavigateToChat(UserMessageDto chat)
    {
        if (chat.ReceiverId == userId)
        {
            Navigation.NavigateTo($"/chats/{chat.SenderId}");
        }
        else
        {
            Navigation.NavigateTo($"/chats/{chat.ReceiverId}");
        }
    }

    private void NavigateToFilmChat(MessagesFilmDto chat)
    {
        Navigation.NavigateTo($"/chats/films/{chat.MovieId}");
    }

    private async Task<string> RefreshTokenAsync()
    {
        var refreshToken = await LocalStorage.GetItemAsync<string>("refreshToken");
        var httpClient = HttpClientFactory.CreateClient("AuthorizedClient");
        var response = await httpClient.PostAsJsonAsync("api/Auth/RefreshToken", new { RefreshToken = refreshToken });

        if (response.IsSuccessStatusCode)
        {
            var newToken = await response.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("authToken", newToken);
            return newToken;
        }
        else
        {
            Console.WriteLine("Ошибка при обновлении токена.");
            await LocalStorage.RemoveItemAsync("authToken");
            await LocalStorage.RemoveItemAsync("refreshToken");
            Navigation.NavigateTo("/login");
            return null;
        }
    }

    private bool IsTokenValid(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var expirationDate = jwtToken.ValidTo;
            return expirationDate > DateTime.UtcNow;
        }
        catch
        {
            return false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token) || !IsTokenValid(token))
            {
                Console.WriteLine("Токен отсутствует или истек. Попытка обновления...");
                token = await RefreshTokenAsync();

                if (string.IsNullOrEmpty(token))
                {
                    Console.WriteLine("Не удалось обновить токен. Перенаправление на страницу входа.");
                    Navigation.NavigateTo("/login");
                    return;
                }
            }
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            userId = int.Parse(jwtToken.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
            personalChats = await MessagesService.getMessagesAsync(userId);

            // Загрузка чатов по фильмам
            filmChats = await MessagesService.getMessagesFilmAsync(movieId);

            StateHasChanged();
            StateHasChanged();
        }
    }

    private void FilterMessagesByFilm(int? filmId)
    {
        if (filmId == null)
        {
            filteredChats = chats;
        }
        else
        {
            filteredChats = chats.Where(chat => chat.MovieId == filmId).ToList();
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:5256/chatHub").Build();

        await hubConnection.StartAsync();

        // await hubConnection.SendAsync("RegisterUser", userId);
    }

    public class UserMessageDto
    {
        public int SenderId { get; set; }
        public int MovieId { get; set; }
        public string SenderName { get; set; }
        public int ReceiverId { get; set; }
        public string ReceiverName { get; set; }
        public string Message { get; set; }
    }

    private void ShowPersonalChats()
    {
        showPersonalChats = true;
        StateHasChanged();
    }

    private void ShowFilmChats()
    {
        showPersonalChats = false;
        StateHasChanged();
    }
}